'use strict';

var diameter = require('../lib/diameter');

var HOST = '127.0.0.1';
var PORT = 3869;

var options = {
    //    beforeAnyMessage: diameter.logMessage,
    afterAnyMessage: diameter.logMessage,
    port: PORT,
    host: HOST
};

var socket = diameter.createConnection(options, function() {});
var connection = socket.diameterConnection;



// **************************************************************//
//		  Creating Capabilities-Exchange request
// **************************************************************//

function createCERequest(connection) 
{
    var request = connection.createRequest("Diameter Common Messages", 'Capabilities-Exchange');
    request.body = request.body.concat([
        ['Origin-Host', 'mfssdp.safarifone.com'],
        ['Origin-Realm', 'www.safarifone.com'],
        ['Host-IP-Address', '127.0.0.1'],
        //['Vendor-ID','776655'],
        ['Product-Name', 'Home Subscriber Server'],
        //['Vendor-ID', '776655']
        ['Auth-Application-Id', '4'],
        ['Auth-Application-Id', '1'],
        ['Auth-Application-Id', '16777217'],
        ['Acct-Application-Id', 3],
        ['Auth-Application-Id', 16777216],
    ]);
    return request;
}

function createSTRequest(connection) {
    var request = connection.createRequest("NASREQ Application", 'ST');
    request.body = request.body.concat([
        ['Session-Id', 'X0ungXYxUKCadUty'],
        ['Origin-Host', 'mfssdp.safarifone.com'],
        ['Origin-Realm', 'www.safarifone.com'],
        ['Destination-Realm', 'www.safarifone.com'],
        ['Auth-Application-Id', '1'],
        ['Termination-Cause', '0'],
    ]);
    return request;
}
// **************************************************************//
//			    Creating Authentication request  		     //
// **************************************************************//
function createAuthenticationRequest(connection) {
    var request = connection.createRequest("NASREQ Application", 'AA');
    request.body = request.body.concat([
        ['Session-Id', 'dZH7jGEadGog2Uw4'],
        ['Origin-Host', 'mfssdp.safarifone.com'],
        ['Origin-Realm', 'www.safarifone.com'],
        ['Destination-Realm', 'www.safarifone.com'],
        ['Client-Request-Id', '23mjyrt65m'],
        ['Diameter-Event-Id', 'qh4bpRn95gCMx1VZ'],
        ['Auth-Application-Id', '1'],
        ['Auth-Request-Type', 1],
        ['Subscription-Id', [
            ['Subscription-Id-Type', 0],
            ['Subscription-Id-Data', new Buffer('252615100005', 'utf-8')]
        ]],
        ['User-Equipment-Info', [
            ['User-Equipment-Info-Type', 1],
            ['User-Equipment-Info-Value', new Buffer.from("123456", 'utf-8')]
        ]],
        ['User-Name', '252615100005'],
        ['User-Password', new Buffer.from("1212", 'utf-8')],
        ['Service-Type', 18],
        ['IMSI', '252615100005'],
        ['Account-Currency', '840'],

        ['SDP-System-Info', [
            ['System-IP', new Buffer('192.168.40.100', 'utf-8')],
            ['System-Secret', new Buffer('123456', 'utf-8')]
        ]],

        ['Channel-Info', [
            ['Channel-Name', new Buffer('192.168.40.100', 'utf-8')],
        ]],
        /*[ 'Location-Info', [
            [ 'Location-Type',  new Buffer('2', 'utf-8' ) ],
        ]],*/

        ['Location-Info-Type', [
            ['Location-Type', new Buffer('2', 'utf-8')],
            ['CELL-ID', '110'],
            ['LAC-ID', '342'],
            ['MCC', new Buffer('252', 'utf-8')],
            ['NMC', new Buffer('62', 'utf-8')],
        ]],
    ]);
    return request;
}

function createAuthorizationRequest(connection) {
    var request = connection.createRequest("NASREQ Application", 'AA');
    request.body = request.body.concat([
    ['Session-Id', 'X0ungXYxUKCadUty'],
    ['Origin-Host', 'mfssdp.safarifone.com'],
    ['Origin-Realm', 'www.safarifone.com'],
    ['Destination-Realm', 'www.safarifone.com'],
    ['Client-Request-Id', '23mjyrt65m'],
    ['Diameter-Event-Id', 'gHli00G0kvMcvOir'],
    ['Auth-Application-Id', '1'],
    ['Auth-Request-Type', 2],
    ['Service-Context-Id', '123'],
    ['Event-Timestamp', '2540001'],
    ['Account-Id', 8],
    

    ['Receiver-Subscription-Id', [
            ['Subscription-Id-Type', 0],
            ['Subscription-Id-Data', new Buffer('252617728392', 'utf-8')]
    ]],
    ['Service-Information', [
        ['Service', [
        ['Service-Id', '6'],
        ['Service-Code', new Buffer('0006', 'utf-8')],
        ['Service-Name',  new Buffer('P2P Transfer', 'utf-8')],
        ]],
    ]],
    ['TxAmount', [
        ['CC-Money',[
            ['Unit-Value',[
                
                ['Value-Digits', 2],
                ['Exponent', 0],
            ]], 
       ]],
    ]],
    

    
    ['Service-Type', 18],

    ['Currency-Code', '840'],
    ['Origin-System-IP',  new Buffer('192.168.99.100', 'utf-8')],

    ]);
    return request;
}

function sendAuthorizationRequest(connection) {
    var authorizationRequest = createAuthorizationRequest(connection);
    // **************************************************************//
    //        Sending Authentication request
    // **************************************************************//
    connection.sendRequest(authorizationRequest).then(function(responseAuthorization) {
            // handle response
            console.log("Authorization Answer received");
            for (var i = 0; i < responseAuthorization.body.length; i++) {
                if (responseAuthorization.body[i][0] === "Result-Code") {
                    if (responseAuthorization.body[i][1] === "DIAMETER_SUCCESS") {
                        console.log("Authorization is successful");
                        break;
                    } else
                    {
                        sendSTRequest();
                    }
                } else 
                {
                    //CE_result_code = 0;
                }
            }
        },
        function(error) {
            console.log('Error sending request: ' + error);
            sendSTRequest(connection);
        });
}

function sendAuthenticationRequest(connection) {
    var authenticationRequest = createAuthenticationRequest(connection);
    // **************************************************************//
    //		  Sending Authentication request
    // **************************************************************//
    connection.sendRequest(authenticationRequest).then(function(responseAuthentication) {
            // handle response
            console.log("Authentication Answer received");
            for (var i = 0; i < responseAuthentication.body.length; i++) {
                if (responseAuthentication.body[i][0] === "Result-Code") {
                    if (responseAuthentication.body[i][1] === "DIAMETER_SUCCESS") {
                        console.log("Authentication is successful");
                        sendAuthorizationRequest(connection);
                        break;
                    } else
                    {
                        sendSTRequest();
                    }
                } else 
                {
                    //CE_result_code = 0;
                }
            }
        },
        function(error) {
            console.log('Error sending request: ' + error);
            sendSTRequest(connection);
        });
}

function sendCERequest(connection) {
    var CERequest = createCERequest(connection);
    // **************************************************************//
    //		  Sending Capabilities-Exchange request
    // **************************************************************//

    connection.sendRequest(CERequest).then(function(responseCER) {
        // handle responseCER
        //console.log("Response command"+ JSON.stringify(responseCER));
        if (responseCER.command === 'Capabilities-Exchange') {
            console.log("Capabilities-Exchange Answer received\n");
            for (var i = 0; i < responseCER.body.length; i++) {
                if (responseCER.body[i][0] === "Result-Code") {
                    if (responseCER.body[i][1] === "DIAMETER_SUCCESS") {
                        console.log("Capabilities-Exchange is successful\n");
                        sendAuthenticationRequest(connection);
                        break;
                    }
                } else 
                {
                    console.log("Capabilities-Exchange failed");
                }
            }
        }
        //console.log("Capabilities-Exchange Request sent to the server");
    }, function(error) {
        console.log('Error sending request: ' + error);
        //sendSTRequest(connection);
    });


}

function sendSTRequest(connection) {
    var STRequest = createCERequest(connection);
    // **************************************************************//
    //		  Sending Capabilities-Exchange request
    // **************************************************************//

    connection.sendRequest(STRequest).then(function(responseSTR) {
        // handle responseSTR
        //console.log("Response command"+ JSON.stringify(responseSTR));
        if (responseSTR.command === 'ST') {
            console.log("Session termination Answer received\n");
            for (var i = 0; i < responseSTR.body.length; i++) {
                if (responseSTR.body[i][0] === "Result-Code") {
                    if (responseSTR.body[i][1] === "DIAMETER_SUCCESS") {
                        console.log("Session has been successfully terminated\n");
                        sendAuthenticationRequest(connection);
                        break;
                    }
                } else {
                    console.log("Capabilities-Exchange failed");
                }

            }
        }
        //console.log("Capabilities-Exchange Request sent to the server");
    }, function(error) {
        console.log('Error sending request: ' + error);
        //sendSTRequest(connection);
    });
}


sendCERequest(connection);


// **************************************************************//
//		  Handling server initiated messages:
// **************************************************************//
socket.on('diameterMessage', function(event) {

    if (event.message.command === 'AA') {
        console.log("AA Answer received");
        console.log(event.response.body);
    }
    //socket.diameterConnection.end();
});
socket.on('error', function(err) {
    console.log(err);
});



//npm install -g node-diameter/node-diameter
//npm install diameter / node-diameter