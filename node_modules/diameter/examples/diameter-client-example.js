'use strict';

var diameter = require('../lib/diameter');

var HOST = '127.0.0.1';
var PORT = 3869;

var options = {
    beforeAnyMessage: diameter.logMessage,
    afterAnyMessage: diameter.logMessage,
    port: PORT,
    host: HOST
};

var socket = diameter.createConnection(options, function() {
    });
    var connection = socket.diameterConnection;

    //var request = connection.createRequest('Diameter Common Messages', 'Capabilities-Exchange');
        
    // **************************************************************//
    //		  Creating Capabilities-Exchange request
    // **************************************************************//
    var request = connection.createRequest("Diameter Common Messages", 'Capabilities-Exchange');
    request.body = request.body.concat([
        ['Origin-Host', 'mfssdp.safarifone.com'],
        ['Origin-Realm','www.safarifone.com'],
        ['Host-IP-Address','127.0.0.1'],
        //['Vendor-ID','776655'],
        ['Product-Name','Home Subscriber Server'],
  	//['Vendor-ID', '776655']
        ['Auth-Application-Id', '4'],
        ['Auth-Application-Id', '1'],
        ['Auth-Application-Id', '16777217'],
        ['Acct-Application-Id',3],
	['Auth-Application-Id', 16777216 ],     
        
	//['Vendor-Specific-Application-ID', [  

  
        //]],
    ]);
    // **************************************************************//
    //		  Sending Capabilities-Exchange request
    // **************************************************************//
    
     connection.sendRequest(request).then(function(response) {
            // handle response
	    //console.log('CER Received*********************************************************************************************************');
	    //console.log("Response command"+ JSON.stringify(response));
	    if (response.command === 'Capabilities-Exchange') 
      {
            console.log("Capabilities-Exchange Answer received\n");
            //console.log("body  : "+ response.body[1][1]); 
            //console.log("body  : "+ response.body.length); 
            var CE_result_code;
            for(var i= 0; i< response.body.length; i++){
              if (response.body[i][0]==="Result-Code")
              {
                if(response.body[i][1]==="DIAMETER_SUCCESS")
                {
                  CE_result_code = 1;
		  break;
                }
              }
              else
              {
                CE_result_code = 0;
              }

        } 

        if (CE_result_code==1)
        {
          console.log("Capabilities-Exchange is successful\n");
        }
        else{

        }
	    }
        //console.log("Capabilities-Exchange Request sent to the server");
    }, function(error) {
        console.log('Error sending request: ' + error);
    });

    // **************************************************************//
    //			    Creating AA request  		     //
    // **************************************************************//
    var request = connection.createRequest("NASREQ Application", 'AA');
    request.body = request.body.concat([
        ['Session-Id', 'dZH7jGEadGog2Uw4'],
        ['Origin-Host','mfssdp.safarifone.com'],
        ['Origin-Realm','www.safarifone.com'],
        ['Destination-Realm','www.safarifone.com'],
        ['Client-Request-Id','23mjyrt65m'],
        ['Diameter-Event-Id', 'qh4bpRn95gCMx1VZ'],
        ['Auth-Application-Id', '1'],

        ['Auth-Request-Type',1],

        [ 'Subscription-Id', [
            [ 'Subscription-Id-Type', 0 ],
            [ 'Subscription-Id-Data', new Buffer( '252615100005', 'utf-8' )]
        ]],
         [ 'User-Equipment-Info', [
             [ 'User-Equipment-Info-Type', 1 ],
             [ 'User-Equipment-Info-Value', new Buffer.from( "123456", 'utf-8' )]
         ]],

        ['User-Name','252615100005'],
        ['User-Password',new Buffer.from( "1212", 'utf-8' )],
        ['Service-Type',18],
        ['IMSI','252615100005'],
        ['Account-Currency','840'],

        [ 'SDP-System-Info', [
            [ 'System-IP',  new Buffer( '192.168.40.100', 'utf-8' ) ],
            [ 'System-Secret', new Buffer( '123456', 'utf-8' )]
        ]],

        [ 'Channel-Info', [
            [ 'Channel-Name',  new Buffer('192.168.40.100', 'utf-8' ) ],
        ]],
        /*[ 'Location-Info', [
            [ 'Location-Type',  new Buffer('2', 'utf-8' ) ],
        ]],*/

        [ 'Location-Info-Type', [
            [ 'Location-Type',  new Buffer('2', 'utf-8' ) ],
            [ 'CELL-ID',  '110' ],
            [ 'LAC-ID', '342' ],
            [ 'MCC',  new Buffer('252', 'utf-8' ) ],
            [ 'NMC',  new Buffer('62', 'utf-8' ) ],
        ]],
    ]);
    // **************************************************************//
    //		  Sending Capabilities-Exchange request
    // **************************************************************//
    connection.sendRequest(request).then(function(response) 
    {
        // handle response
        console.log("AA Request Rssponse to the server");
    }, function(error) 
    {
        console.log('Error sending request: ' + error);
    });


    // **************************************************************//
    //		  Handling server initiated messages:
    // **************************************************************//
	socket.on('diameterMessage', function(event) 
	{

	     if (event.message.command === 'AA') 
	     {
		    console.log("AA Answer received");
	        console.log(event.response.body);      
	     }
	    //socket.diameterConnection.end();
	});
	socket.on('error', function(err) 
	{
	    console.log(err);
	});



//npm install -g node-diameter/node-diameter
//npm install diameter / node-diameter
